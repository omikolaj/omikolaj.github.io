---
layout: post
title:      "My Experience with CORS"
date:       2018-03-12 10:14:16 +0000
permalink:  my_experience_with_cors
---


Cross origin resource sharing is a way for browsers to add security by supplying additional HTTP headers to requests that are attempting to access information that is not on the `same origin` domain. A quick example of this can be found on https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS and it illustrates how an `<img> src` tag can make a request to another domain to obtain that image. Depending on the type of request you are making, the it may trigger what is called a 'preflight request'. When performing operations that may have implications to user data, such requests are often 'preflight'-ed. When such request is sent, it will first send an HTTP request by the `OPTIONS` method to determine if the requesting server's operation is safe. There is a long list of conditiona that if evaluate to true will perform the `preflight` operation first, before sending the request. We should keep in mind this happens when we perform cross domain requests. 

Experimenting with JavaScript fetch() method, and learning about GitHub API, I was determined to implement GitHub integration in my website where users could an open issue if they found a bug, display all of the open issues and fork the repository. Since somewhere on the 'internet' I read that GitHub API supports CORS, I didnâ€™t read too much more into it and I tried to construct my fetch() method to make `POST` requests straight to GitHub API from my JavaScript. I was confident that this would work, I started crafting a lot of custom front-end validation logic  for when a user were to a) create an issue without a title, b) attempt to only supply the body, c) the kind of informational messages I would display. Having most of my validations figured out when it came to perform the actual `POST` to GitHub, all of my response kept getting `preflight` (rightfully so) but they kept failing. The error message was informative enough to suggest I try using `mode: 'no-cors'` to which the GitHub API server responded with an `opaque` response. Basically, a severely restricted response. After hours of research, and reading GitHub open and closed issues.....revelation! GitHub API only supports CORS in server to server communication. Some of the attempts I have tried were different variations of using `fetch()` and `$.ajax()` all of which had failed. All of those requests were originating from the browser (JavaScript front-end) and attempting to talk to the GitHub API server. GitHub API server kept responding without any value in "Access-Control-Allow-Origin" which told my browser that I was unable to see any of the data.

The solution was to create an `<a href=#>` button that would point the request to my back-end rails server which would then communicate with the GItHub API server and perform my `Cross Origin Resource Sharing` and allow my server to `POST` user data to the repository. 

Integrating other public API's into your application requires you to do an in-depth reading on the documentation, other people's issues and posts to fully understand how to use it. When it comes to working with public APIs, at the end of the day all they supply is data. When you know what you are asking for, you can get a lot of information which you can then use to build your dynamic websites.

